rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for workouts collection
    match /workouts/{workoutId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Rules for weightEntries collection
    match /weightEntries/{entryId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Rules for pillReminders collection
    match /pillReminders/{reminderId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Rules for connectionTests collection (for debugging)
    match /connectionTests/{testId} {
      allow read, write: if isAuthenticated();
    }

    // Test collection - for connection verification
    match /test/{document=**} {
      // Allow read for connection verification
      allow read: if true;
    }
  }
} 